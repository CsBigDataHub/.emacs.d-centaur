#+author: Chetan Koneru
#+title: Emacs notes on Linux

* Building Emacs on Ubuntu

#+begin_src sh
  # https://github.com/hubisan/emacs-wsl

  sudo apt install -y autoconf automake autotools-dev bsd-mailx build-essential \
       diffstat gnutls-dev imagemagick libasound2-dev libc6-dev libdatrie-dev \
       libdbus-1-dev libgconf2-dev libgif-dev libgnutls28-dev libgpm-dev libgtk2.0-dev \
       libgtk-3-dev libice-dev libjpeg-dev liblockfile-dev liblqr-1-0 libm17n-dev \
       libmagickwand-dev libncurses5-dev libncurses-dev libotf-dev libpng-dev \
       librsvg2-dev libsm-dev libthai-dev libtiff5-dev libtiff-dev libtinfo-dev libtool \
       libx11-dev libxext-dev libxi-dev libxml2-dev libxmu-dev libxmuu-dev libxpm-dev \
       libxrandr-dev libxt-dev libxtst-dev libxv-dev quilt sharutils texinfo xaw3dg \
       xaw3dg-dev xorg-dev xutils-dev zlib1g-dev libjansson-dev libxaw7-dev \
       libselinux1-dev libmagick++-dev libacl1-dev gir1.2-javascriptcoregtk-4.0 \
       gir1.2-webkit2-4.0 libenchant1c2a libglvnd-core-dev libicu-le-hb-dev \
       libidn2-0-dev libjavascriptcoregtk-4.0-dev liboss4-salsa2 libsoup2.4-dev \
       libsystemd-dev libwebkit2gtk-4.0-dev libx11-xcb-dev libxcb-dri2-0-dev \
       libxcb-dri3-dev libxcb-glx0-dev libxcb-present-dev libxshmfence-dev \
       x11proto-composite-dev x11proto-core-dev x11proto-damage-dev \
       x11proto-fixes-dev
#+end_src

#+begin_src sh
  git clone --depth=1 --single-branch
  --branch emacs-27 https://github.com/emacs-mirror/emacs.git

  cd emacs/

  sudo apt install -y autoconf make gcc texinfo libgtk-3-dev libxpm-dev \
       libjpeg-dev libgif-dev libtiff5-dev libgnutls28-dev libncurses5-dev \
       libjansson-dev libharfbuzz-dev libharfbuzz-bin

  ./autogen.sh

  # ./configure --with-json --with-modules --with-harfbuzz --with-compress-install \
  #             --with-threads --with-included-regex --with-x-toolkit=lucid --with-zlib --without-sound \
  #             --without-xpm --with-jpeg --without-tiff --without-gif --with-png \
  #             --without-rsvg --with-imagemagick  --without-toolkit-scroll-bars \
  #             --without-gpm --without-dbus --without-makeinfo --without-pop \
  #             --without-mailutils --without-gsettings --without-pop


  #./configure --with-json --with-modules --with-harfbuzz --with-compress-install \
  #            --with-threads --with-included-regex --with-xwidgets --with-zlib

  # I used this
  ./configure --with-json --with-xwidgets --with-mailutils

  make
  sudo make install
#+end_src




* [[https://unix.stackexchange.com/a/151046][x11 - CapsLock as modifier key for application keymaps - Unix & Linux Stack Exchange]] :website:

[2020-08-17 Mon 10:36]

** Article

There are a bajillion answers on the internet, most of them confusing.

The key is you need to map 'keycode 66' to your hyper key, remove the mapping of that key from other mod{1,2,4,5}'s (only if present), and then set mod3.

Open ~/.Xmodmap and put the following:

#+BEGIN_EXAMPLE
  clear mod3
  ! Unmap capslock
  clear Lock
  keycode 66 = Hyper_L

  ! Leave mod4 as windows key _only_
  remove mod4 = Hyper_L

  ! Set mod3 to capslock
  add mod3 = Hyper_L
#+END_EXAMPLE

Run this

#+BEGIN_EXAMPLE
   xmodmap ~/.Xmodmap
#+END_EXAMPLE

If something goes wrong, you can reset your keyboard with:

#+BEGIN_EXAMPLE
   setxkbmap -layout us
#+END_EXAMPLE

Likely causes of something exploding are that Hyper_L is mapped someplace else. Fix this by running xmodmap without args to figure out what else is bound to Hyper_L. When you know what you need to remove, chuck a 'remove BINDING = Hyper_L' in your .Xmodmap file.

The .Xmodmap file will be loaded in when you open X11 sessions, you should have this mapping in place next time you login or reboot.

This configuration works for my ubuntu 14.04 setup. If you have a different *nix and this doesn't work, please post what you did to get around it here and I'll incorporate it into the answer.

** [[https://askubuntu.com/a/1197073][keyboard - How do I remap Caps Lock to Hyper Key in Ubuntu 18.04 - Ask Ubuntu]] :website:

[2020-08-17 Mon 10:37]

*** Article

As of a few days ago this is working:

- Run Ubuntu on Wayland
- Put this in your .bashrc

#+BEGIN_EXAMPLE
  setxkbmap -option caps:hyper
  setxkbmap -option caps:none
#+END_EXAMPLE

*** [[https://www.emacswiki.org/emacs/CapsKey][EmacsWiki: Caps Key]] :website:

[2020-08-17 Mon 10:38]

**** Article


***** [[https://www.emacswiki.org/emacs?search=%22CapsKey%22][Caps Key]]


This page is about the keyboard key typically labeled *[[https://www.emacswiki.org/emacs?search=%22CapsLock%22][CapsLock]]*. It covers different ways to use the key, including changing its behavior.

****** Contents

 [[Using CapsLock as Hyper Modifier][Using CapsLock as Hyper Modifier]]

****** Redefining as autocomplete/expand


It's useful to map the [[https://www.emacswiki.org/emacs/CapsKey][CapsKey]] to dabbrev-expand, for automatic completion/expansion. Here's how:

In ~/.Xmodmap, remap the Caps_Lock key to some suitable key:

#+BEGIN_EXAMPLE
   ! Caps Lock -> Nabla
   keycode 66 = nabla
#+END_EXAMPLE

Then in your ~/.emacs:

#+BEGIN_EXAMPLE
   ;; Seems emacs23 doesn't understand nabla
   (when (equal "23" (substring emacs-version 0 2))
       (global-set-key '[8711] 'dabbrev-expand))
#+END_EXAMPLE

****** Using CapsLock as Hyper Modifier


More modifiers are always good :-)

In ~/.Xmodmap, remap the Caps_Lock key to some suitable key:

#+BEGIN_EXAMPLE
   ! Caps Lock -> Nabla
   keycode 66 = nabla
#+END_EXAMPLE

If you add this to your .emacs you will get an Hyper key in gtk and in an xterm!

#+BEGIN_EXAMPLE
   (define-key key-translation-map [8711] 'event-apply-hyper-modifier)
#+END_EXAMPLE

* To keep focus for firefox tabs

#+begin_example
  browser.tabs.loadDivertedInBackground
#+end_example

* [[https://askubuntu.com/a/1271886][Scanner of Epson ET-2750 doesn't work - "sane_start: Invalid argument" - Kubuntu 20.04 - Ask Ubuntu]] :website:

[2020-10-27 Tue 18:37]

** Article

*** Preface


- Kubuntu 20.04
- Epson ET-3750, so not exactly your model. I faced the same problems, though.
- The TL;DR solution can be found in the Epilogue below.
- All the experiments were done over WiFi, the device was never connected via USB.

*** XSane


1. I was very biased to get XSane to work: I did the logo some 20 years ago.
2. For me, the error you describe goes away, when I do a preview scan first. /This is my answer to your original question./ But if you, like me, tried to get the thing to scan under Linux, be my guest for the odyssey in the rest of this post. I imagine that it'll be very similar to your printer/scanner.
3. BXSane usually crashes with a segfault while writing the results (using PNG target format). It /did/ work once, but I've had many crashes.
4. Scanning without saving worked at 300DPI but never at 600DPI or higher. I didn't try all resolutions. At 600DPI I get the same error message (invalid argument, ung√ºltiges Argument) after the scan finishes.

Then I installed Epsons imagescan packages (available at [[http://support.epson.net/linux/en/imagescanv3.php]]). I had to configure a suitable =/etc/imagescan/imagescan.conf= by adding the correct IP to the default file and uncommenting the relevant lines.

After that, another scanner is found by XSane. The label depends on what you enter into the aforementioned conf file.

With this backend, XSane even allows using the document feeder (ADF) as input, not only the flatbed. But it doesn't let me select the resolution at all. And the multi-page interface of XSane is ...uh... sub-optimal.

*** Skanlite


After all that, I tried the program Skanlite.

- Works @300 DPI with the escl connection, throws invalid argument at 600DPI
- Works with imagescan scanner at resolutions up to 600DPI, also with ADF.
- Doesn't support PDF, let alone multi-page PDF. It saves all pages to separate files.

*** SimpleScan


- SimpleScan also detects the out-of-the-box escl scanner and the imagescan-backed scanner.
- ADF works almost fine with imagescan backend and produces a multi-page PDF. I can select different resolutions here. The scans are a bit on the bluish side of things, though.
- It pretends to be able to do ADF via the escl connection, too. But that never works. Generally speaking, it never seems to grey out any options, regardless whether they work or not.
- I scans well at 300DPI with the escl connection.
- SimpleScan has almost no image quality correction settings, like the other tools provide.
- Apparently only PDF is supported as an output format.
- During my testing the ADF functionality with the imagescan connection stopped working. Crossing my fingers it will work again in the future.

*** ImageScan


- The scanning tool from Epson only finds the one scanner that is configured in =/etc/imagescan/imagescan.conf=
- It allows selection of input from flatbed and ADF
- ADF scan produced a multi-page PDF
- This was the only program that I could get to scan at more than 300DPI. At 1200DPI it produced a ca 200MB PNG file.

*** Scanner's Scan to Computer


I have no clue what the ET-3750 expects from a computer to be able to "scan to it". I tried some unprotected Samba shares but to no avail. Maybe USB would work?

*** Conclusion


- Every solution sucks in some way or the other
- I'll go with SimpleScan + imagescan-backend or imagescan program whenever I want to scan several pages from the ADF. Of course, this requires that the ADF thing works again in SimpleScan.
- I'll likely go with Skanlite and either the imagescan or escl backend for 1 page scans from the flatbed.
- (UPDATE) Also, let's wait for the next version of SANE which ships support for ET-2650 and ET-3750, hopefully covering your ET-2750 as well. See [[https://sane-project.gitlab.io/website/lists/sane-mfgs-cvs.html]]

*** Epilogue


- I installed the latest release from SANE using the PPA of one of the SANE maintainers: [[https://launchpad.net/%7Erolfbensch/+archive/ubuntu/sane-release][https://launchpad.net/~rolfbensch/+archive/ubuntu/sane-release]]
- After that everything just works with the eSCL backend. High resolution scans, ADF, multi-page scans.
- You can use XSane, Skanlite, SimpleScan, depending on frontend features.
- I'll eventually purge the Epson packages.
- Kudos and a huge thank you to the SANE maintainers.


* [[https://www.emadelsaid.com/using-emacs-for-as-email-client/][Using Emacs as email client | Emad Elsaid]] :website:

[2020-11-10 Tue 08:47]

**** Article

Using Emacs as email client\\
08 Nov 2020

--------------

Couple months ago I decided to reduce the number of online services I'm using and depend on my local machine setup, My local setup is linux on all machines (Except for the gaming PC) so it would be possible to get rid of the Gmail interface for example in favor or a local application.

As I depend on Emacs as an editor and other tasks I wanted to try using it as an email client, The way I used was ‚ÄúMu4e‚Äù which is a package that can read/send emails from emacs interface, here is how I had this setup working.

***** Downloading all emails locally with OfflineIMAP


Offline IMAP is a python program that can connect to many IMAP servers and sync your emails from the IMAP servers to local machine directory. which means I'll have all my email offline I can search, read and move them around like any other file on the machine.

Offline IMAP is part of Archlinux community packages so install it with

#+BEGIN_EXAMPLE
   sudo packman -S offlineimap
#+END_EXAMPLE

Then I needed to configure it to sync the emails to =~/mail= directory, OfflineIMAP config file lives in =~/.offlineimaprc=, the content for me is as follows

#+BEGIN_EXAMPLE
   [ general]
   accounts =  account1,  account2
   pythonfile = ~/ path/ to/ mailpass. py
   maxsyncaccounts =  2

  [ Account  account1]
   localrepository =  account1- local
   remoterepository =  account1- remote
   autorefresh =  5
   postsynchook =  mu  index

  [ Repository  account1- local]
   type =  Maildir
   localfolders = ~/ mail/ account1

  [ Repository  account1- remote]
   type =  Gmail
   remoteuser =  account1@ gmail. com
   remotepasseval =  get_pass( "~/dotfiles/.ssh/account1.gmail.password")
   sslcacertfile = / etc/ ssl/ certs/ ca- certificates. crt
   ssl_version =  tls1_2

  [ Account  account2]
   localrepository =  account2- local
   remoterepository =  account2- remote
   autorefresh =  5
   postsynchook =  mu  index

  [ Repository  account2- local]
   type =  Maildir
   localfolders = ~/ mail/ account2

  [ Repository  account2- remote]
   type =  Gmail
   remoteuser =  account2@ gmail. com
   remotepasseval =  get_pass( "~/dotfiles/.ssh/account2.password")
   sslcacertfile = / etc/ ssl/ certs/ ca- certificates. crt
   ssl_version =  tls1_2
#+END_EXAMPLE

This configuration uses a password encrypted in a file with my rsa private key, that gets decrypted with a pythong function defined in =~/path/to/mailpass.py=

So I get an [[https://myaccount.google.com/apppasswords][application specific]] password for my email account from my gmail account then I encrypt it to a file like so:

#+BEGIN_EXAMPLE
    echo  -n  "<password>" | openssl rsautl  -inkey ~/.ssh/id_rsa  -encrypt  > ~/path/to/email.password
#+END_EXAMPLE

The =~/path/to/mailpass.py= is a python file that has one function it takes a file path and decrypt it with openssl

#+BEGIN_EXAMPLE
    #! /usr/bin/env python2
   from  subprocess  import  check_output

   def  get_pass ( file ):
       return  check_output ( "cat "  +  file  +  "| openssl rsautl -inkey ~/.ssh/id_rsa -decrypt" ,  shell = True ). splitlines ()[ 0 ]
#+END_EXAMPLE

IMAP uses this =get_pass()= function to get the password, this is an alternative to writing your password directly in the =.offlineimaprc= file.

Now running =offlineimap= command should pickup the configuration and start syncing it to =~/mail=, this operation takes a long time depending on the number of emails you have in your mail.

To make sure offlineimap runs everytime I login to my user account I enable and start the systemd service that comes with offlineimap package

#+BEGIN_EXAMPLE
   systemctl  enable offlineimap  --user
  systemctl start offlineimap  --user
#+END_EXAMPLE

You'll notice that offlineimap configuration we added this line

#+BEGIN_EXAMPLE
   postsynchook = mu index
#+END_EXAMPLE

***** Using Mu to index the emails


which will run =mu index= command after every sync, [[https://www.djcbsoftware.nl/code/mu/][mu]] is a program that uses Xapian to build a full text search database for the email directory, then you can use =mu= to search in your emails, =mu= comes with =Mu4e= which is the emacs interface for mu.

mu package is in archlinux AUR under the name =mu= so you can install it with the AUR helpe you have, I'm using =yay= so the command for me is:

#+BEGIN_EXAMPLE
   yay  -S mu
#+END_EXAMPLE

Doing that will make offlimeimap sync the emails every 5 minutes and then invokes =mu index= to rebuild the database.

You can use =mu= to ask for new emails now, for example I have a script that will display the number of unread emails in my =INBOX= directories

#+BEGIN_EXAMPLE
   mu find  'flag:unread AND (maildir:/account1/INBOX OR maildir:/account2/INBOX)' 2> /dev/null |  wc  -l
#+END_EXAMPLE

This will query for unread emails in the INBOX directories in each account and then count the number of lines in the output.

I have this line in my polybar configuration which is unobtrusive way to know if I have any new emails, instead of the annoying notifications.

***** Setting up Emacs Mu4e


Now we'll need to have our Mu4e interface setup in Emacs so we can read new emails.

I'm using spacemacs but the configuration for Gnu emacs shouldn't be different. First we load the Mu4e package/layer.

For spacemacs users you should add the layer in your =~/spacemacs= layers list

#+BEGIN_EXAMPLE
    ( mu4e  :variables
        mu4e-use-maildirs-extension  t
        mu4e-enable-async-operations  t
        mu4e-enable-notifications  t )
#+END_EXAMPLE

And then I load a file called =mu4e-config.el=, in the =;;;additional files= section I require it

#+BEGIN_EXAMPLE
    ( require  'mu4e-config )
#+END_EXAMPLE

The file lives in =~/dotfiles/emacs/mu4e-config.el= and I push this directory path to the load-path of emacs with

#+BEGIN_EXAMPLE
    ( push  "~/dotfiles/emacs/"  load-path )
#+END_EXAMPLE

The file will hold all of our Mu4e configuration

#+BEGIN_EXAMPLE
    ( provide  'mu4e-config )

   ( require  'mu4e-contrib )

   ( spacemacs/set-leader-keys  "M"  'mu4e )

   ( setq  mu4e-inboxes-query  "maildir:/account1/INBOX OR maildir:/account2/INBOX" )
   ( setq  smtpmail-queue-dir  "~/mail/queue/cur" )
   ( setq  mail-user-agent  'mu4e-user-agent )
   ( setq  mu4e-html2text-command  'mu4e-shr2text )
   ( setq  shr-color-visible-luminance-min  60 )
   ( setq  shr-color-visible-distance-min  5 )
   ( setq  shr-use-colors  nil )
   ( setq  mu4e-view-show-images  t )
   ( setq  mu4e-enable-mode-line  t )
   ( setq  mu4e-update-interval  300 )
   ( setq  mu4e-sent-messages-behavior  'delete )
   ( setq  mu4e-index-cleanup  nil )
   ( setq  mu4e-index-lazy-check  t )
   ( setq  mu4e-view-show-addresses  t )
   ( setq  mu4e-headers-include-related  nil )

   ( advice-add  #' shr-colorize-region  :around  ( defun  shr-no-colourise-region  ( &rest  ignore )))

   ( with-eval-after-load  'mu4e
     ( mu4e-alert-enable-mode-line-display )
     ( add-to-list  'mu4e-bookmarks
                  ' ( :name   "All inboxes"
                    :query  mu4e-inboxes-query
                    :key    ?i ))

     ( setq  mu4e-contexts
           ` (  , ( make-mu4e-context
                :name  "account1"
                :match-func  ( lambda  ( msg )  ( when  msg  ( string-prefix-p  "/account1"  ( mu4e-message-field  msg  :maildir ))))
                :vars  ' (
                        ( mu4e-sent-folder  .  "/account1/[Gmail].Sent Mail" )
                        ( mu4e-drafts-folder  .  "/account1/[Gmail].Drafts" )
                        ( mu4e-trash-folder  .  "/account1/[Gmail].Trash" )
                        ( mu4e-refile-folder  .  "/account1/[Gmail].All Mail" )
                        ( user-mail-address  .  " [email¬†protected]" )
                        ( user-full-name  .  "Emad Elsaid" )
                        ( mu4e-compose-signature  .  ( concat  "Emad Elsaid\nSoftware Engineer\n" ))
                        ( smtpmail-smtp-user  .  "account1" )
                        ( smtpmail-local-domain  .  "gmail.com" )
                        ( smtpmail-default-smtp-server  .  "smtp.gmail.com" )
                        ( smtpmail-smtp-server  .  "smtp.gmail.com" )
                        ( smtpmail-smtp-service  .  587 )
                        ))
              , ( make-mu4e-context
                :name  "account2"
                :match-func  ( lambda  ( msg )  ( when  msg  ( string-prefix-p  "/account2"  ( mu4e-message-field  msg  :maildir ))))
                :vars  ' (
                        ( mu4e-sent-folder  .  "/account2/[Gmail].Sent Mail" )
                        ( mu4e-drafts-folder  .  "/account2/[Gmail].Drafts" )
                        ( mu4e-trash-folder  .  "/account2/[Gmail].Trash" )
                        ( mu4e-refile-folder  .  "/account2/[Gmail].All Mail" )
                        ( user-mail-address  .  " [email¬†protected]" )
                        ( user-full-name  .  "Emad Elsaid" )
                        ( mu4e-compose-signature  .  ( concat  "Emad Elsaid\nSoftware Engineer\n" ))
                        ( smtpmail-smtp-user  .  "account2" )
                        ( smtpmail-local-domain  .  "gmail.com" )
                        ( smtpmail-default-smtp-server  .  "smtp.gmail.com" )
                        ( smtpmail-smtp-server  .  "smtp.gmail.com" )
                        ( smtpmail-smtp-service  .  587 )
                        ))
              )))
#+END_EXAMPLE

The previous configuration will define 2 different context each for every email account, each context we tell mu4e the directories for sent, draft, trash and archive directories.

We also told mu4e which smtp servers to use for each context. without it we'll be able to read the emails but not send any emails. You may have noticed that this configuration doesn't have the password for the SMTP servers.

Emacs uses a file called =~/.authinfo= to connect to remote servers, the SMTP servers are not different for emacs, when =mu4e= tries to connect to the SMTP server over port 587, emacs will use the credentials in this file to connect to it.

The file content should look like this:

#+BEGIN_EXAMPLE
   machine smtp.gmail.com port 587 login account1 password
  machine smtp.gmail.com port 587 login account2 password
#+END_EXAMPLE

We also defined a new bookmark that shows us the inbox emails across all accounts, it's bound to =bi=.

And we changed bound the Mu4e interface to =SPC M= where =SPC= is my leader key in spacemacs configuration.

***** How to use this setup


So now this is my workflow:

- offlineimap works in the background syncing my email to =~/mail=
- When I see the unread email count in my status bar I switch to emacs
- I press =SPC M= to open Mu4e
- I press =bi= to open the all inbox emails bookmark
- I open the email with =RET= and archive it with =r=
- When I go through all my unread emails list I press =x= to archive all emails
- I press =q= couple times to continue what I was doing in emacs

Searching through emails:

- I open Mu4e with =SPC M=
- press =s= to search, I write a word I remember about this email then =RET=
- I go through the emails with =C-j= and =C-k=
- When I'm done reading the email I was searching for I quit the email interface with =q=

Sending email:

- I open Mu4e with =SPC M=
- Start a new compose buffer =C=
- Fill in the =to= and =subject= fields and the message body
- Press =, c= to send it or =, k= to discard it.

***** Bonus step to sync across machines


Syncing across machines works when imap sync one machine to the remove IMAP server and the other machine do the same, if you want to make it a bit faster you can use syncthing to sync the =~/mail= directory to your other machines, for me I back it up to my phone and other 2 machines at the same time.
